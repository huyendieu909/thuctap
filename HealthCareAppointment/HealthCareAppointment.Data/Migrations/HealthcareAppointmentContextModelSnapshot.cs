// <auto-generated />
using System;
using HealthCareAppointment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HealthCareAppointment.Data.Migrations
{
    [DbContext(typeof(HealthcareAppointmentContext))]
    partial class HealthcareAppointmentContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HealthCareAppointment.Models.Appointment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DoctorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = new Guid("da0f0d1f-c75f-4a53-a5b0-d3e1b868952a"),
                            Date = new DateTime(2021, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("71d6e368-04cc-4766-b621-9d9f1c9e8f6e"),
                            PatientId = new Guid("c93d1328-8109-48a9-9ecb-77402a64d933"),
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("12193e30-ae95-4792-ba5c-0d2a507cd940"),
                            Date = new DateTime(2021, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DoctorId = new Guid("09fabf72-c8a7-4776-ad9e-69f99449ae77"),
                            PatientId = new Guid("362cfb46-a865-48c1-bc03-a01101a0075f"),
                            Status = 0
                        });
                });

            modelBuilder.Entity("HealthCareAppointment.Models.Users", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Specialization")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c93d1328-8109-48a9-9ecb-77402a64d933"),
                            DateOfBirth = new DateTime(1999, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quuq@gmail.com",
                            Name = "Duong Ba Thanh",
                            Password = "User@123",
                            Role = 0,
                            Specialization = "None"
                        },
                        new
                        {
                            Id = new Guid("71d6e368-04cc-4766-b621-9d9f1c9e8f6e"),
                            DateOfBirth = new DateTime(1992, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "qtc@gmail.com",
                            Name = "Quanh Thanh Cong",
                            Password = "User@123",
                            Role = 1,
                            Specialization = "Dentist"
                        },
                        new
                        {
                            Id = new Guid("09fabf72-c8a7-4776-ad9e-69f99449ae77"),
                            DateOfBirth = new DateTime(1977, 12, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quu@gmail.com",
                            Name = "Duong Ba Trinh",
                            Password = "User@123",
                            Role = 0,
                            Specialization = "None"
                        },
                        new
                        {
                            Id = new Guid("46ab5b8a-8880-46e6-8b39-5f201e2a27e9"),
                            DateOfBirth = new DateTime(1992, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "quyquy909@gmail.com",
                            Name = "Hoang Quy",
                            Password = "User@123",
                            Role = 1,
                            Specialization = "Dr"
                        },
                        new
                        {
                            Id = new Guid("362cfb46-a865-48c1-bc03-a01101a0075f"),
                            DateOfBirth = new DateTime(1992, 11, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "qtc@gmail.com",
                            Name = "Hoang Anh",
                            Password = "User@123",
                            Role = 1,
                            Specialization = "Dr"
                        });
                });

            modelBuilder.Entity("HealthCareAppointment.Models.Appointment", b =>
                {
                    b.HasOne("HealthCareAppointment.Models.Users", "Doctor")
                        .WithMany("AppointmentsAsDoctor")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HealthCareAppointment.Models.Users", "Patient")
                        .WithMany("AppointmentsAsPatient")
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("HealthCareAppointment.Models.Users", b =>
                {
                    b.Navigation("AppointmentsAsDoctor");

                    b.Navigation("AppointmentsAsPatient");
                });
#pragma warning restore 612, 618
        }
    }
}
